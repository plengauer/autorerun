name: 'autorerun'
description: 'automatically rerun workflows that have failed due to ratelimits'
inputs:
  github_token:
    description: 'API Token for Github'
    required: true
runs:
  using: "composite"
  steps:
    - name: "Search and rerun jobs"
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: |
        repository="${{ github.repository }}"
        
        curl() {
          command curl --no-progress-meter -H "Authorization: Bearer $GITHUB_TOKEN" "$@"
        }
        export -f curl
        
        curl_paginated() {
          { 
            curl --head "$@" | grep '^link: ' | cut -d ' '  -f 2- | tr -d ' <>' | tr ',' '\n' \
              | grep 'rel="last"' | cut -d ';' -f1 | cut -d '?' -f 2- | tr '&' '\n' \
              | grep '^page=' | cut -d = -f 2 \
              | xargs seq 1 || true
          } | while read -r page; do echo "$@"'&page='"$page"; done | xargs bash -ec 'curl "$@"' bash
        }
        
        if [ "${{ github.event_name }}" = 'workflow_run' ]; then
          echo '${{ github.event.workflow_run }}'
        else
          curl_paginated https://api.github.com/repos/"$repository"/pulls'?state=open&per_page=100' | jq -r .[].head.ref | sort -u | while read -r branch; do
            curl_paginated https://api.github.com/repos/"$repository"/actions/workflows'?per_page=100' | jq -r .workflows[].id | sort -u | while read -r workflow_id; do
              curl_paginated https://api.github.com/repos/"$repository"/actions/runs'?'branch="$branch"'&per_page=100' | jq '.workflow_runs[] | select(.workflow_id == '"$workflow_id"')'
            done
          done
        fi | jq -s -r '.[0] | [ .id, .run_attempt, .conclusion ] | @tsv' | while read -r run_id run_attempt conclusion; do
          if [ "$conclusion" = failure ]; then echo "$run_id" "$run_attempt"; fi
        done | while read -r run_id run_attempt; do
          curl_paginated https://api.github.com/repos/"$repository"/actions/runs/"$run_id"/attempts/"$run_attempt"/jobs'?per_page=100' | jq '.jobs[] | select(.conclusion == "failure") | .id'
        done | while read -r job_id; do
          curl -L https://api.github.com/repos/"$repository"/actions/jobs/"$job_id"/logs | cut -d ' ' -f 2- | tr '[:upper:]' '[:lower:]' | grep -F 'connection timeout
        500 internal server error
        429 too many requests
        rate limit exceeded
        rate limit hit
        docker: toomanyrequests' >&2 && echo "$job_id" || true
        done | while read -r job_id; do
          curl -X POST https://api.github.com/repos/"$repository"/actions/jobs/"$job_id"/rerun
        done
