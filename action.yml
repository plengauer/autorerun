name: 'autorerun'
description: 'automatically rerun workflows that have failed due to ratelimits'
inputs:
  github_token:
    description: 'API Token for Github'
    required: true
runs:
  using: "composite"
  steps:
    - name: "Search and rerun jobs"
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: |
        repository="$GITHUB_REPOSITORY"
        
        curl() {
          command curl --no-progress-meter -H "Authorization: Bearer $GITHUB_TOKEN" "$@"
        }
        export -f curl

        curl_paginated() {
          {
            curl --head "$@" | grep '^link: ' | cut -d ' '  -f 2- | tr -d ' <>' | tr ',' '\n' \
              | grep 'rel="last"' | cut -d ';' -f1 | cut -d '?' -f 2- | tr '&' '\n' \
              | grep '^page=' | cut -d = -f 2 \
              | xargs seq 1 || true
          } | while read -r page; do echo "$@"'&page='"$page"; done | xargs bash -ec 'curl "$@"' bash
        }

        should_rerun() {
          sed -e ':a' -e '/\\wsl.exe --update$/ { N; s/\n//; ba }' | grep -E 'connection timeout
        connection reset by peer
        econnreset
        500 internal server error
        internal server error \(500\)
        500 internal error
        internal error \(500\)
        429 too many requests
        too many requests \(429\)
        rate limit exceeded
        rate limit hit
        toomanyrequests
        error 403: server failed to authenticate the request\. make sure the value of Authorization header is formed correctly including the signature\.
        \\wsl\.exe --update.*forbidden \(403\)' > /dev/null
        }

        if [ "$GITHUB_EVENT_NAME" = 'workflow_run' ]; then
          cat "$GITHUB_EVENT_PATH"
        else
          curl_paginated https://api.github.com/repos/"$repository"/pulls'?state=open&per_page=100' | jq -r .[].head.ref | while read -r branch; do
            curl_paginated https://api.github.com/repos/"$repository"/actions/workflows'?per_page=100' | jq -r .workflows[].id | while read -r workflow_id; do echo "$branch" "$workflow_id"; done
          done | while read -r branch workflow_id; do
            curl https://api.github.com/repos/"$repository"/actions/workflows/"$workflow_id"/runs'?'branch="$branch"'&per_page=1' | jq '.workflow_runs[0]' | { grep -v '^null$' || true; }
          done
        fi | jq -r '. | select(.conclusion == "failure") | select(.run_attempt < 100) | [ .id, .run_attempt ] | @tsv' | while read -r run_id run_attempt; do
          curl_paginated https://api.github.com/repos/"$repository"/actions/runs/"$run_id"/attempts/"$run_attempt"/jobs'?per_page=100'
        done | jq '.jobs[] | select(.conclusion == "failure") | .id' | while read -r job_id; do
          curl -L https://api.github.com/repos/"$repository"/actions/jobs/"$job_id"/logs | cut -d ' ' -f 2- | tr '[:upper:]' '[:lower:]' | tr -d '\r' | tr -d '\000' | should_rerun && echo "$job_id" || true
        done | while read -r job_id; do
          curl -X POST https://api.github.com/repos/"$repository"/actions/jobs/"$job_id"/rerun
        done
